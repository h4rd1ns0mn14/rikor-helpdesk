// Rikor HelpDesk - –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
class RikorHelpDesk {
  constructor() {
    this.currentRoute = 'dashboard';
    this.currentUser = {
      id: 1,
      name: '–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤',
      email: 'p.sidorov@rikor.ru',
      role: 'admin',
      avatar: '–ü–°'
    };
    
    // –î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏ Rikor
    this.data = {
      tickets: [
        {
          id: "RIK-2025-001",
          title: "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Wi-Fi –Ω–∞ –Ω–æ—É—Ç–±—É–∫–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Windows",
          description: "–ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Windows 11 –ø—Ä–æ–ø–∞–ª–æ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
          status: "open",
          priority: "high",
          category: "network",
          deviceType: "–ù–æ—É—Ç–±—É–∫",
          assignee: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
          reporter: "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
          created: "2025-09-17T09:30:00Z",
          updated: "2025-09-17T14:20:00Z",
          comments: [
            {author: "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", text: "–ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", timestamp: "2025-09-17T09:30:00Z", type: "user"},
            {author: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", text: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä —á–µ—Ä–µ–∑ –î–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤", timestamp: "2025-09-17T14:20:00Z", type: "agent"}
          ]
        },
        {
          id: "RIK-2025-002",
          title: "–ó–∞–≤–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ",
          description: "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–≤–∏—Å–∞–µ—Ç –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ –±–æ–ª–µ–µ 80%",
          status: "in_progress",
          priority: "critical",
          category: "performance",
          deviceType: "–°–µ—Ä–≤–µ—Ä",
          assignee: "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤",
          reporter: "–ú–∏—Ö–∞–∏–ª –ö—É–∑–Ω–µ—Ü–æ–≤",
          created: "2025-09-16T15:20:00Z",
          updated: "2025-09-17T10:15:00Z",
          comments: []
        },
        {
          id: "RIK-2025-003",
          title: "–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –º–∏–Ω–∏ –ü–ö –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π",
          description: "–ú–∏–Ω–∏ –ü–ö –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è",
          status: "waiting",
          priority: "medium",
          category: "hardware",
          deviceType: "–ú–∏–Ω–∏ –ü–ö",
          assignee: "–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞",
          reporter: "–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤",
          created: "2025-09-17T11:45:00Z",
          updated: "2025-09-17T12:00:00Z",
          comments: []
        },
        {
          id: "RIK-2025-004",
          title: "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
          description: "IP-—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ",
          status: "resolved",
          priority: "low",
          category: "network",
          deviceType: "–¢–µ–ª–µ—Ñ–æ–Ω",
          assignee: "–ê–ª–µ–∫—Å–µ–π –ú–æ—Ä–æ–∑–æ–≤",
          reporter: "–û–ª—å–≥–∞ –ò–≤–∞–Ω–æ–≤–∞",
          created: "2025-09-15T14:30:00Z",
          updated: "2025-09-16T16:45:00Z",
          comments: []
        },
        {
          id: "RIK-2025-005", 
          title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª–µ –∫–∞–¥—Ä–æ–≤",
          description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä –¥–ª—è –ø–µ—á–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
          status: "open",
          priority: "low",
          category: "hardware",
          deviceType: "–î—Ä—É–≥–æ–µ",
          assignee: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
          reporter: "–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞",
          created: "2025-09-17T13:15:00Z",
          updated: "2025-09-17T13:15:00Z",
          comments: []
        }
      ],
      deviceTypes: [
        {id: "laptop", name: "–ù–æ—É—Ç–±—É–∫", icon: "üíª"},
        {id: "server", name: "–°–µ—Ä–≤–µ—Ä", icon: "üñ•Ô∏è"}, 
        {id: "minipc", name: "–ú–∏–Ω–∏ –ü–ö", icon: "üì¶"},
        {id: "phone", name: "–¢–µ–ª–µ—Ñ–æ–Ω", icon: "üìû"},
        {id: "other", name: "–î—Ä—É–≥–æ–µ", icon: "üîß"}
      ],
      users: [
        {id: 1, name: "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤", email: "p.sidorov@rikor.ru", role: "admin", department: "IT Support", avatar: "–ü–°", status: "online", joinDate: "2023-01-15", ticketsResolved: 156, avgRating: 4.8},
        {id: 2, name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", email: "i.petrov@rikor.ru", role: "agent", department: "IT Support", avatar: "–ò–ü", status: "online", joinDate: "2023-03-10", ticketsResolved: 89, avgRating: 4.6},
        {id: 3, name: "–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞", email: "e.novikova@rikor.ru", role: "agent", department: "IT Support", avatar: "–ï–ù", status: "away", joinDate: "2023-06-20", ticketsResolved: 134, avgRating: 4.9},
        {id: 4, name: "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", email: "a.smirnova@rikor.ru", role: "user", department: "Marketing", avatar: "–ê–°", status: "offline", joinDate: "2024-01-12", ticketsCreated: 23}
      ],
      knowledgeBase: [
        {id: 1, title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi –Ω–∞ –Ω–æ—É—Ç–±—É–∫–∞—Ö Rikor", category: "–ù–æ—É—Ç–±—É–∫", content: "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –Ω–æ—É—Ç–±—É–∫–∞—Ö", views: 287, helpful: 45, tags: ["–Ω–æ—É—Ç–±—É–∫", "wifi"], lastUpdated: "2025-09-10"},
        {id: 2, title: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ Rikor", category: "–°–µ—Ä–≤–µ—Ä", content: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", views: 156, helpful: 28, tags: ["—Å–µ—Ä–≤–µ—Ä", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"], lastUpdated: "2025-09-05"},
        {id: 3, title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏ –ü–ö –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö", category: "–ú–∏–Ω–∏ –ü–ö", content: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–∏–Ω–∏ –ü–ö –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö", views: 98, helpful: 19, tags: ["–º–∏–Ω–∏ –ø–∫", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è"], lastUpdated: "2025-09-12"},
        {id: 4, title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ IP-—Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", category: "–¢–µ–ª–µ—Ñ–æ–Ω", content: "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ IP-—Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", views: 234, helpful: 41, tags: ["—Ç–µ–ª–µ—Ñ–æ–Ω", "ip"], lastUpdated: "2025-09-08"},
        {id: 5, title: "–ü—Ä–∏–Ω—Ç–µ—Ä—ã –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è", category: "–î—Ä—É–≥–æ–µ", content: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", views: 178, helpful: 33, tags: ["–ø—Ä–∏–Ω—Ç–µ—Ä", "–ø–µ—Ä–∏—Ñ–µ—Ä–∏—è"], lastUpdated: "2025-09-14"}
      ],
      categories: [
        {id: "network", name: "–°–µ—Ç—å", color: "#3b82f6", icon: "üåê"},
        {id: "hardware", name: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", color: "#ef4444", icon: "üîß"},
        {id: "software", name: "–ü–û", color: "#10b981", icon: "üíø"},
        {id: "performance", name: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", color: "#f59e0b", icon: "‚ö°"}
      ],
      stats: {
        totalTickets: 156, 
        openTickets: 23, 
        inProgressTickets: 8, 
        resolvedTickets: 125,
        avgResponseTime: "1.2", 
        avgResolutionTime: "4.8", 
        customerSatisfaction: 96.2,
        activeAgents: 12, 
        todayTickets: 23, 
        weeklyTrend: [12, 18, 15, 22, 19, 25, 23],
        deviceStats: {
          "–ù–æ—É—Ç–±—É–∫": 45,
          "–°–µ—Ä–≤–µ—Ä": 12,
          "–ú–∏–Ω–∏ –ü–ö": 8,
          "–¢–µ–ª–µ—Ñ–æ–Ω": 15,
          "–î—Ä—É–≥–æ–µ": 76
        }
      }
    };

    this.filteredTickets = [...this.data.tickets];
    this.currentTicket = null;
    this.charts = {};
    this.formValidation = {};
    
    this.init();
  }

  init() {
    this.bindEvents();
    this.handleRoute();
    this.updateBreadcrumb();
  }

  bindEvents() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    document.addEventListener('click', (e) => {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è
      if (e.target.closest('.sidebar__link')) {
        e.preventDefault();
        const link = e.target.closest('.sidebar__link');
        const route = link.dataset.route;
        if (route) {
          this.navigate(route);
        }
      }

      // –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
      if ((e.target.textContent && e.target.textContent.includes('–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç')) || 
          e.target.classList.contains('create-ticket-btn')) {
        e.preventDefault();
        this.openCreateTicketModal();
      }

      // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞
      if (e.target.closest('[data-ticket-id]') || 
          (e.target.textContent === '–û—Ç–∫—Ä—ã—Ç—å' && e.target.classList.contains('btn'))) {
        e.preventDefault();
        let ticketId;
        if (e.target.closest('[data-ticket-id]')) {
          ticketId = e.target.closest('[data-ticket-id]').dataset.ticketId;
        } else {
          const row = e.target.closest('tr');
          if (row) {
            const idCell = row.querySelector('td strong');
            if (idCell) {
              ticketId = idCell.textContent;
            }
          }
        }
        if (ticketId) {
          this.viewTicket(ticketId);
        }
      }

      // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—å–∏
      if (e.target.closest('[data-article-id]')) {
        e.preventDefault();
        const articleId = parseInt(e.target.closest('[data-article-id]').dataset.articleId);
        if (articleId) {
          this.viewArticle(articleId);
        }
      }

      // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
      if (e.target.classList.contains('modal__close') || e.target.id === 'modal-backdrop') {
        this.closeModal();
      }

      // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
      if (e.target.classList.contains('add-comment-btn') || 
          e.target.textContent === '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') {
        const ticketId = this.currentTicket?.id;
        if (ticketId) {
          this.addComment(ticketId);
        }
      }

      if (e.target.classList.contains('helpful-btn') || 
          e.target.textContent.includes('–ü–æ–ª–µ–∑–Ω–æ')) {
        const modal = e.target.closest('.modal');
        if (modal && modal.id === 'article-modal') {
          const titleElement = modal.querySelector('.modal__title');
          if (titleElement) {
            const title = titleElement.textContent;
            const article = this.data.knowledgeBase.find(a => a.title === title);
            if (article) {
              this.markArticleHelpful(article.id);
            }
          }
        }
      }

      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (e.target.classList.contains('notification-btn') || e.target.textContent === 'üîî') {
        this.toggleNotifications();
      }

      if (e.target.classList.contains('user-menu-btn') || e.target.closest('.user-menu-btn')) {
        this.toggleUserMenu();
      }

      if (e.target.classList.contains('mobile-menu-toggle')) {
        this.toggleSidebar();
      }

      // –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–∫–µ—Ç–æ–≤
      if (e.target.textContent && e.target.textContent.includes('–≠–∫—Å–ø–æ—Ä—Ç')) {
        this.exportTickets();
      }

      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ç–∏–∫–µ—Ç–∞–º –∏–∑ dashboard
      if (e.target.classList.contains('tickets-nav-btn')) {
        this.navigate('tickets');
      }
    });

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    const globalSearch = document.getElementById('globalSearch');
    if (globalSearch) {
      globalSearch.addEventListener('input', (e) => this.handleGlobalSearch(e.target.value));
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') this.closeModal();
    });

    // –§–æ—Ä–º—ã
    document.addEventListener('submit', (e) => {
      if (e.target.id === 'create-ticket-form') {
        this.handleFormSubmit(e);
      }
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    document.addEventListener('input', (e) => {
      if (e.target.closest('#create-ticket-form')) {
        this.validateField(e.target);
      }
    });

    document.addEventListener('change', (e) => {
      if (e.target.closest('#create-ticket-form')) {
        this.validateField(e.target);
      }
    });
  }

  navigate(route) {
    console.log('–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫:', route);
    this.currentRoute = route;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É
    document.querySelectorAll('.sidebar__link').forEach(link => {
      link.classList.remove('active');
      if (link.dataset.route === route) {
        link.classList.add('active');
      }
    });
    
    this.handleRoute();
    this.updateBreadcrumb();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    document.querySelector('.sidebar')?.classList.remove('open');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–µ–Ω—é
    document.getElementById('user-menu-dropdown')?.classList.add('hidden');
    document.getElementById('notifications-panel')?.classList.add('hidden');
  }

  handleRoute() {
    const routerView = document.getElementById('router-view');
    
    switch(this.currentRoute) {
      case 'dashboard':
        routerView.innerHTML = this.renderDashboard();
        setTimeout(() => this.initDashboardCharts(), 100);
        break;
      case 'tickets':
        routerView.innerHTML = this.renderTickets();
        setTimeout(() => this.bindTicketFilters(), 100);
        break;
      case 'knowledge':
        routerView.innerHTML = this.renderKnowledgeBase();
        setTimeout(() => this.bindKnowledgeSearch(), 100);
        break;
      case 'reports':
        routerView.innerHTML = this.renderReports();
        setTimeout(() => this.initReportsCharts(), 100);
        break;
      case 'users':
        routerView.innerHTML = this.renderUsers();
        break;
      case 'settings':
        routerView.innerHTML = this.renderSettings();
        break;
      case 'profile':
        routerView.innerHTML = this.renderProfile();
        break;
    }
  }

  renderDashboard() {
    const stats = this.calculateStats();
    
    return `
      <div class="page-header">
        <div>
          <h1 class="page-title">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
          <p class="page-subtitle">–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Rikor</p>
        </div>
        <button class="btn btn--primary create-ticket-btn">
          + –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç
        </button>
      </div>

      <div class="stats-grid">
        <div class="stat-card stat-card--primary">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 33, 128, 141;">üìä</div>
          </div>
          <div class="stat-card__value">${this.data.stats.totalTickets.toLocaleString()}</div>
          <div class="stat-card__label">–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤</div>
          <div class="stat-card__change stat-card__change--positive">+12% –∑–∞ –Ω–µ–¥–µ–ª—é</div>
        </div>

        <div class="stat-card stat-card--warning">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 245, 158, 11;">üé´</div>
          </div>
          <div class="stat-card__value">${this.data.stats.openTickets}</div>
          <div class="stat-card__label">–û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤</div>
          <div class="stat-card__change stat-card__change--negative">-5% –∑–∞ –Ω–µ–¥–µ–ª—é</div>
        </div>

        <div class="stat-card stat-card--success">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 16, 185, 129;">‚è±Ô∏è</div>
          </div>
          <div class="stat-card__value">${this.data.stats.avgResponseTime}—á</div>
          <div class="stat-card__label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
          <div class="stat-card__change stat-card__change--positive">-0.3—á –∑–∞ –Ω–µ–¥–µ–ª—é</div>
        </div>

        <div class="stat-card stat-card--primary">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 33, 128, 141;">üòä</div>
          </div>
          <div class="stat-card__value">${this.data.stats.customerSatisfaction}%</div>
          <div class="stat-card__label">–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
          <div class="stat-card__change stat-card__change--positive">+2.1% –∑–∞ –º–µ—Å—è—Ü</div>
        </div>
      </div>

      <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤ -->
      <div class="card" style="margin-bottom: var(--space-32);">
        <div class="card__body">
          <h3 style="margin-bottom: var(--space-16);">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤</h3>
          <div class="device-stats-grid">
            ${Object.entries(this.data.stats.deviceStats).map(([deviceType, count]) => `
              <div class="device-stat">
                <div class="device-stat__icon">${this.getDeviceIcon(deviceType)}</div>
                <div class="device-stat__count">${count}</div>
                <div class="device-stat__label">${deviceType}</div>
              </div>
            `).join('')}
          </div>
        </div>
      </div>

      <div class="chart-container">
        <div class="chart-header">
          <h3 class="chart-title">–î–∏–Ω–∞–º–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é</h3>
          <div>
            <button class="btn btn--secondary btn--sm">7 –¥–Ω–µ–π</button>
            <button class="btn btn--secondary btn--sm">30 –¥–Ω–µ–π</button>
          </div>
        </div>
        <canvas id="weeklyChart"></canvas>
      </div>

      <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 24px; margin-top: 24px;">
        <div class="table-container">
          <div class="table-header">
            <h3 class="table-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∏–∫–µ—Ç—ã</h3>
            <button class="btn btn--secondary btn--sm tickets-nav-btn">–í—Å–µ —Ç–∏–∫–µ—Ç—ã</button>
          </div>
          <table class="table">
            <thead>
              <tr>
                <th>ID</th>
                <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                <th>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                <th>–°–æ–∑–¥–∞–Ω</th>
              </tr>
            </thead>
            <tbody>
              ${this.data.tickets.slice(0, 5).map(ticket => `
                <tr data-ticket-id="${ticket.id}">
                  <td><strong>${ticket.id}</strong></td>
                  <td>
                    <span class="text-primary" style="cursor: pointer;">
                      ${ticket.title.length > 40 ? ticket.title.substring(0, 40) + '...' : ticket.title}
                    </span>
                  </td>
                  <td>
                    <span class="device-badge">
                      ${this.getDeviceIcon(ticket.deviceType)} ${ticket.deviceType}
                    </span>
                  </td>
                  <td><span class="badge badge--${this.getStatusClass(ticket.status)}">${this.getStatusName(ticket.status)}</span></td>
                  <td><span class="badge badge--${this.getPriorityClass(ticket.priority)}">${this.getPriorityName(ticket.priority)}</span></td>
                  <td>${this.formatDate(ticket.created)}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>

        <div class="table-container">
          <div class="table-header">
            <h3 class="table-title">–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã</h3>
          </div>
          <div style="padding: 16px;">
            ${this.data.users.filter(u => u.role === 'agent').slice(0, 5).map(agent => `
              <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
                <div class="sidebar__avatar" style="width: 32px; height: 32px; font-size: 12px;">${agent.avatar}</div>
                <div style="flex: 1;">
                  <div style="font-weight: 500; font-size: 14px;">${agent.name}</div>
                  <div style="font-size: 12px; color: var(--color-text-secondary);">
                    ${agent.ticketsResolved || 0} —Ç–∏–∫–µ—Ç–æ–≤ ‚Ä¢ ‚≠ê ${agent.avgRating || 0}
                  </div>
                </div>
                <div class="badge ${agent.status === 'online' ? 'badge--success' : 'badge--gray'}">
                  ${agent.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      </div>
    `;
  }

  renderTickets() {
    return `
      <div class="page-header">
        <div>
          <h1 class="page-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏</h1>
          <p class="page-subtitle">–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: ${this.filteredTickets.length}</p>
        </div>
        <div class="flex gap-8">
          <button class="btn btn--secondary export-btn">üìä –≠–∫—Å–ø–æ—Ä—Ç</button>
          <button class="btn btn--primary create-ticket-btn">+ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç</button>
        </div>
      </div>

      <div class="filters">
        <div class="filters__group">
          <span class="filters__label">–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</span>
          <select id="deviceTypeFilter" class="form-control filter-select device-filter">
            <option value="">–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</option>
            <option value="–ù–æ—É—Ç–±—É–∫">üíª –ù–æ—É—Ç–±—É–∫</option>
            <option value="–°–µ—Ä–≤–µ—Ä">üñ•Ô∏è –°–µ—Ä–≤–µ—Ä</option>
            <option value="–ú–∏–Ω–∏ –ü–ö">üì¶ –ú–∏–Ω–∏ –ü–ö</option>
            <option value="–¢–µ–ª–µ—Ñ–æ–Ω">üìû –¢–µ–ª–µ—Ñ–æ–Ω</option>
            <option value="–î—Ä—É–≥–æ–µ">üîß –î—Ä—É–≥–æ–µ</option>
          </select>
        </div>

        <div class="filters__group">
          <span class="filters__label">–°—Ç–∞—Ç—É—Å:</span>
          <select id="statusFilter" class="form-control filter-select">
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="open">–û—Ç–∫—Ä—ã—Ç</option>
            <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
            <option value="waiting">–û–∂–∏–¥–∞–Ω–∏–µ</option>
            <option value="resolved">–†–µ—à–µ–Ω</option>
          </select>
        </div>
        
        <div class="filters__group">
          <span class="filters__label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span>
          <select id="priorityFilter" class="form-control filter-select">
            <option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
            <option value="low">–ù–∏–∑–∫–∏–π</option>
            <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
            <option value="high">–í—ã—Å–æ–∫–∏–π</option>
            <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
          </select>
        </div>

        <div class="filters__group">
          <span class="filters__label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
          <select id="categoryFilter" class="form-control filter-select">
            <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            ${this.data.categories.map(cat => `<option value="${cat.id}">${cat.name}</option>`).join('')}
          </select>
        </div>

        <div class="filters__group">
          <span class="filters__label">–ü–æ–∏—Å–∫:</span>
          <input type="text" id="ticketSearch" class="form-control filter-input" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É...">
        </div>
      </div>

      <div class="table-container">
        <table class="table">
          <thead>
            <tr>
              <th>ID</th>
              <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
              <th>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
              <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
              <th>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</th>
              <th>–°–æ–∑–¥–∞–Ω</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody id="ticketsTableBody">
            ${this.renderTicketsTable()}
          </tbody>
        </table>
      </div>
    `;
  }

  renderTicketsTable() {
    return this.filteredTickets.map(ticket => `
      <tr>
        <td><strong>${ticket.id}</strong></td>
        <td>
          <span class="text-primary" style="cursor: pointer;" data-ticket-id="${ticket.id}">
            ${ticket.title.length > 50 ? ticket.title.substring(0, 50) + '...' : ticket.title}
          </span>
        </td>
        <td>
          <span class="device-badge">
            ${this.getDeviceIcon(ticket.deviceType)} ${ticket.deviceType}
          </span>
        </td>
        <td><span class="badge badge--${this.getStatusClass(ticket.status)}">${this.getStatusName(ticket.status)}</span></td>
        <td><span class="badge badge--${this.getPriorityClass(ticket.priority)}">${this.getPriorityName(ticket.priority)}</span></td>
        <td>${this.getCategoryName(ticket.category)}</td>
        <td>${ticket.assignee || '<span class="text-muted">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</span>'}</td>
        <td>${this.formatDate(ticket.created)}</td>
        <td>
          <div class="flex gap-4">
            <button class="btn btn--sm btn--primary view-ticket-btn" data-ticket="${ticket.id}">–û—Ç–∫—Ä—ã—Ç—å</button>
            <button class="btn btn--sm btn--secondary">‚úèÔ∏è</button>
          </div>
        </td>
      </tr>
    `).join('');
  }

  renderKnowledgeBase() {
    const categories = [...new Set(this.data.knowledgeBase.map(article => article.category))];
    
    return `
      <div class="page-header">
        <div>
          <h1 class="page-title">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</h1>
          <p class="page-subtitle">–°—Ç–∞—Ç—å–∏ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
        </div>
        <button class="btn btn--primary">+ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é</button>
      </div>

      <div style="margin-bottom: 32px;">
        <div style="position: relative; max-width: 500px;">
          <input type="text" id="knowledgeSearch" class="form-control kb-search-input" placeholder="üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π..." style="padding-left: 40px;">
        </div>
      </div>

      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 24px;">
        ${categories.map(category => `
          <div class="card">
            <div class="card__body">
              <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
                <div style="width: 40px; height: 40px; border-radius: 8px; background: var(--color-bg-1); display: flex; align-items: center; justify-content: center; font-size: 18px;">
                  ${this.getDeviceIcon(category)}
                </div>
                <h3 style="margin: 0; color: var(--color-text);">${category}</h3>
              </div>
              
              <div style="space-y: 8px;">
                ${this.data.knowledgeBase.filter(article => article.category === category).map(article => `
                  <div class="kb-article-item" style="padding: 12px; border-radius: 6px; border: 1px solid var(--color-border); margin-bottom: 8px; cursor: pointer; transition: all 0.2s ease;" 
                       data-article-id="${article.id}">
                    <div style="font-weight: 500; color: var(--color-primary); margin-bottom: 4px;">
                      ${article.title}
                    </div>
                    <div style="font-size: 12px; color: var(--color-text-secondary); display: flex; gap: 16px;">
                      <span>üëÅÔ∏è ${article.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
                      <span>üëç ${article.helpful} –ø–æ–ª–µ–∑–Ω–æ</span>
                      <span>üìÖ ${this.formatDate(article.lastUpdated)}</span>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          </div>
        `).join('')}
      </div>
    `;
  }

  renderReports() {
    return `
      <div class="page-header">
        <div>
          <h1 class="page-title">–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
          <p class="page-subtitle">–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
        </div>
        <div class="flex gap-8">
          <button class="btn btn--secondary">üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</button>
          <button class="btn btn--primary">üìà –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</button>
        </div>
      </div>

      <div class="stats-grid" style="margin-bottom: 32px;">
        <div class="stat-card stat-card--success">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 16, 185, 129;">‚úÖ</div>
          </div>
          <div class="stat-card__value">${this.data.stats.resolvedTickets}</div>
          <div class="stat-card__label">–†–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤</div>
          <div class="stat-card__change stat-card__change--positive">+18% –∑–∞ –º–µ—Å—è—Ü</div>
        </div>

        <div class="stat-card stat-card--primary">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 33, 128, 141;">‚è±Ô∏è</div>
          </div>
          <div class="stat-card__value">${this.data.stats.avgResolutionTime}—á</div>
          <div class="stat-card__label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è</div>
          <div class="stat-card__change stat-card__change--positive">-0.5—á –∑–∞ –º–µ—Å—è—Ü</div>
        </div>

        <div class="stat-card stat-card--warning">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 245, 158, 11;">üë•</div>
          </div>
          <div class="stat-card__value">${this.data.stats.activeAgents}</div>
          <div class="stat-card__label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤</div>
          <div class="stat-card__change stat-card__change--positive">+2 –∑–∞ –Ω–µ–¥–µ–ª—é</div>
        </div>

        <div class="stat-card stat-card--primary">
          <div class="stat-card__header">
            <div class="stat-card__icon" style="--icon-color: 33, 128, 141;">üìà</div>
          </div>
          <div class="stat-card__value">${this.data.stats.todayTickets}</div>
          <div class="stat-card__label">–¢–∏–∫–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è</div>
          <div class="stat-card__change stat-card__change--positive">+5 —Å —É—Ç—Ä–∞</div>
        </div>
      </div>

      <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 24px; margin-bottom: 32px;">
        <div class="chart-container">
          <div class="chart-header">
            <h3 class="chart-title">–¢–∏–∫–µ—Ç—ã –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤</h3>
          </div>
          <canvas id="deviceChart"></canvas>
        </div>

        <div class="chart-container">
          <div class="chart-header">
            <h3 class="chart-title">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</h3>
          </div>
          <canvas id="prioritiesChart"></canvas>
        </div>
      </div>

      <div class="chart-container">
        <div class="chart-header">
          <h3 class="chart-title">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤</h3>
        </div>
        <canvas id="agentsChart"></canvas>
      </div>
    `;
  }

  renderUsers() {
    return `
      <div class="page-header">
        <div>
          <h1 class="page-title">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>
          <p class="page-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã Rikor</p>
        </div>
        <button class="btn btn--primary">+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
      </div>

      <div class="table-container">
        <table class="table">
          <thead>
            <tr>
              <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
              <th>Email</th>
              <th>–†–æ–ª—å</th>
              <th>–û—Ç–¥–µ–ª</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            ${this.data.users.map(user => `
              <tr>
                <td>
                  <div class="flex items-center gap-12">
                    <div class="sidebar__avatar" style="width: 36px; height: 36px;">${user.avatar}</div>
                    <div>
                      <div style="font-weight: 500;">${user.name}</div>
                      <div style="font-size: 12px; color: var(--color-text-secondary);">
                        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ${this.formatDate(user.joinDate)}
                      </div>
                    </div>
                  </div>
                </td>
                <td>${user.email}</td>
                <td>
                  <span class="badge ${user.role === 'admin' ? 'badge--danger' : user.role === 'agent' ? 'badge--success' : 'badge--gray'}">
                    ${user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : user.role === 'agent' ? '–ê–≥–µ–Ω—Ç' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                  </span>
                </td>
                <td>${user.department}</td>
                <td>
                  <span class="badge ${user.status === 'online' ? 'badge--success' : user.status === 'away' ? 'badge--warning' : 'badge--gray'}">
                    ${user.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : user.status === 'away' ? '–û—Ç–æ—à–µ–ª' : '–û—Ñ–ª–∞–π–Ω'}
                  </span>
                </td>
                <td>
                  ${user.role === 'agent' ? `
                    <div style="font-size: 12px;">
                      <div>–†–µ—à–µ–Ω–æ: ${user.ticketsResolved || 0}</div>
                      <div>–†–µ–π—Ç–∏–Ω–≥: ‚≠ê ${user.avgRating || 0}</div>
                    </div>
                  ` : user.role === 'user' ? `
                    <div style="font-size: 12px;">
                      –°–æ–∑–¥–∞–Ω–æ: ${user.ticketsCreated || 0}
                    </div>
                  ` : ''}
                </td>
                <td>
                  <div class="flex gap-4">
                    <button class="btn btn--sm btn--secondary">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                    <button class="btn btn--sm btn--danger">üóëÔ∏è</button>
                  </div>
                </td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  }

  renderSettings() {
    return `
      <div class="page-header">
        <div>
          <h1 class="page-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h1>
          <p class="page-subtitle">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Rikor HelpDesk</p>
        </div>
      </div>

      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 24px;">
        <div class="card">
          <div class="card__body">
            <h3 style="margin-bottom: 16px;">–¢–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤</h3>
            <div style="space-y: 12px;">
              ${this.data.deviceTypes.map(device => `
                <div style="display: flex; align-items: center; justify-content: space-between; padding: 8px 12px; border-radius: 6px; border: 1px solid var(--color-border);">
                  <div style="display: flex; align-items: center; gap: 8px;">
                    <span style="font-size: 16px;">${device.icon}</span>
                    <span>${device.name}</span>
                  </div>
                  <button class="btn btn--sm btn--secondary">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                </div>
              `).join('')}
            </div>
            <button class="btn btn--secondary mt-16" style="width: 100%;">+ –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</button>
          </div>
        </div>

        <div class="card">
          <div class="card__body">
            <h3 style="margin-bottom: 16px;">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤</h3>
            <div style="space-y: 12px;">
              ${this.data.categories.map(cat => `
                <div style="display: flex; align-items: center; justify-content: space-between; padding: 8px 12px; border-radius: 6px; border: 1px solid var(--color-border);">
                  <div style="display: flex; align-items: center; gap: 8px;">
                    <div style="width: 16px; height: 16px; border-radius: 4px; background: ${cat.color};"></div>
                    <span>${cat.icon} ${cat.name}</span>
                  </div>
                  <button class="btn btn--sm btn--secondary">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                </div>
              `).join('')}
            </div>
            <button class="btn btn--secondary mt-16" style="width: 100%;">+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
          </div>
        </div>

        <div class="card">
          <div class="card__body">
            <h3 style="margin-bottom: 16px;">SLA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
            <div style="space-y: 16px;">
              <div>
                <label class="form-label">–í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—á–∞—Å—ã)</label>
                <input type="number" class="form-control" value="2">
              </div>
              <div>
                <label class="form-label">–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (—á–∞—Å—ã)</label>
                <input type="number" class="form-control" value="24">
              </div>
              <div>
                <label class="form-label">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–∫–µ—Ç—ã (—á–∞—Å—ã)</label>
                <input type="number" class="form-control" value="1">
              </div>
            </div>
            <button class="btn btn--primary mt-16" style="width: 100%;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
          </div>
        </div>

        <div class="card">
          <div class="card__body">
            <h3 style="margin-bottom: 16px;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
            <div style="space-y: 12px;">
              <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                <input type="checkbox" checked>
                <span>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö</span>
              </label>
              <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                <input type="checkbox" checked>
                <span>SMS –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤</span>
              </label>
              <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                <input type="checkbox">
                <span>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</span>
              </label>
              <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                <input type="checkbox" checked>
                <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ</span>
              </label>
            </div>
            <button class="btn btn--primary mt-16" style="width: 100%;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
          </div>
        </div>
      </div>
    `;
  }

  renderProfile() {
    return `
      <div class="page-header">
        <div>
          <h1 class="page-title">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
          <p class="page-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ Rikor</p>
        </div>
      </div>

      <div style="display: grid; grid-template-columns: 1fr 2fr; gap: 32px;">
        <div class="card">
          <div class="card__body" style="text-align: center;">
            <div class="sidebar__avatar" style="width: 80px; height: 80px; font-size: 32px; margin: 0 auto 16px;">–ü–°</div>
            <h3>${this.currentUser.name}</h3>
            <p style="color: var(--color-text-secondary); margin-bottom: 16px;">${this.currentUser.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</p>
            <div class="badge badge--success">–û–Ω–ª–∞–π–Ω</div>
            <button class="btn btn--secondary" style="width: 100%; margin-top: 16px;">–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä</button>
          </div>
        </div>

        <div class="card">
          <div class="card__body">
            <h3 style="margin-bottom: 24px;">–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <form style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
              <div class="form-group">
                <label class="form-label">–ò–º—è</label>
                <input type="text" class="form-control" value="${this.currentUser.name}">
              </div>
              <div class="form-group">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" value="${this.currentUser.email}">
              </div>
              <div class="form-group">
                <label class="form-label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input type="tel" class="form-control" value="+7 (999) 123-45-67">
              </div>
              <div class="form-group">
                <label class="form-label">–û—Ç–¥el</label>
                <input type="text" class="form-control" value="IT Support">
              </div>
              <div class="form-group" style="grid-column: 1 / -1;">
                <label class="form-label">–û —Å–µ–±–µ</label>
                <textarea class="form-control" rows="3">–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ Rikor —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.</textarea>
              </div>
            </form>
            <button class="btn btn--primary mt-16">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
          </div>
        </div>
      </div>
    `;
  }

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  openCreateTicketModal() {
    const modal = document.getElementById('create-ticket-modal');
    const backdrop = document.getElementById('modal-backdrop');
    
    if (modal && backdrop) {
      modal.classList.remove('hidden');
      backdrop.classList.remove('hidden');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categorySelect = document.getElementById('ticket-category');
      if (categorySelect) {
        categorySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>' +
          this.data.categories.map(cat => `<option value="${cat.id}">${cat.icon} ${cat.name}</option>`).join('');
      }

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ—à–∏–±–∫–∏
      this.clearFormErrors();
      const form = document.getElementById('create-ticket-form');
      if (form) {
        form.reset();
      }
    }
  }

  viewTicket(ticketId) {
    const ticket = this.data.tickets.find(t => t.id === ticketId);
    if (!ticket) return;

    this.currentTicket = ticket;
    const modal = document.getElementById('ticket-modal');
    const body = document.getElementById('ticket-modal-body');
    const footer = document.getElementById('ticket-modal-footer');

    document.getElementById('ticket-modal-title').textContent = `${ticket.id}: ${ticket.title}`;

    body.innerHTML = `
      <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 24px; margin-bottom: 24px;">
        <div>
          <h4 style="margin-bottom: 12px;">–û–ø–∏—Å–∞–Ω–∏–µ</h4>
          <p style="line-height: 1.6; margin-bottom: 24px;">${ticket.description}</p>
        </div>
        
        <div>
          <div class="card">
            <div class="card__body">
              <h5 style="margin-bottom: 12px;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
              <div style="space-y: 8px; font-size: 14px;">
                <div><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> 
                  <span class="device-badge">
                    ${this.getDeviceIcon(ticket.deviceType)} ${ticket.deviceType}
                  </span>
                </div>
                <div><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="badge badge--${this.getStatusClass(ticket.status)}">${this.getStatusName(ticket.status)}</span></div>
                <div><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> <span class="badge badge--${this.getPriorityClass(ticket.priority)}">${this.getPriorityName(ticket.priority)}</span></div>
                <div><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${this.getCategoryName(ticket.category)}</div>
                <div><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> ${ticket.assignee || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</div>
                <div><strong>–ó–∞—è–≤–∏—Ç–µ–ª—å:</strong> ${ticket.reporter}</div>
                <div><strong>–°–æ–∑–¥–∞–Ω:</strong> ${this.formatDate(ticket.created)}</div>
                <div><strong>–û–±–Ω–æ–≤–ª–µ–Ω:</strong> ${this.formatDate(ticket.updated)}</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      ${ticket.comments && ticket.comments.length > 0 ? `
        <div style="margin-top: 32px;">
          <h4 style="margin-bottom: 16px;">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (${ticket.comments.length})</h4>
          ${ticket.comments.map(comment => `
            <div style="display: flex; gap: 12px; margin-bottom: 16px; padding: 16px; background: var(--color-bg-1); border-radius: 8px;">
              <div class="sidebar__avatar" style="width: 36px; height: 36px; flex-shrink: 0;">${this.getAvatarFromName(comment.author)}</div>
              <div style="flex: 1;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                  <strong>${comment.author}</strong>
                  <span style="font-size: 12px; color: var(--color-text-secondary);">${this.formatDate(comment.timestamp)}</span>
                </div>
                <p style="line-height: 1.5; margin: 0;">${comment.text}</p>
              </div>
            </div>
          `).join('')}
        </div>
      ` : ''}

      <div style="margin-top: 24px;">
        <h5 style="margin-bottom: 8px;">–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</h5>
        <textarea id="new-comment" class="form-control" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."></textarea>
      </div>
    `;

    footer.innerHTML = `
      <div style="display: flex; gap: 8px; align-items: center; flex: 1;">
        <select class="form-control" style="width: auto;">
          <option value="open" ${ticket.status === 'open' ? 'selected' : ''}>–û—Ç–∫—Ä—ã—Ç</option>
          <option value="in_progress" ${ticket.status === 'in_progress' ? 'selected' : ''}>–í —Ä–∞–±–æ—Ç–µ</option>
          <option value="waiting" ${ticket.status === 'waiting' ? 'selected' : ''}>–û–∂–∏–¥–∞–Ω–∏–µ</option>
          <option value="resolved" ${ticket.status === 'resolved' ? 'selected' : ''}>–†–µ—à–µ–Ω</option>
        </select>
        <button class="btn btn--secondary">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
      </div>
      <div style="display: flex; gap: 8px;">
        <button class="btn btn--secondary close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
        <button class="btn btn--success add-comment-btn">–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</button>
      </div>
    `;

    modal.classList.remove('hidden');
    document.getElementById('modal-backdrop').classList.remove('hidden');
  }

  viewArticle(articleId) {
    const article = this.data.knowledgeBase.find(a => a.id === articleId);
    if (!article) return;

    const modal = document.getElementById('article-modal');
    const body = document.getElementById('article-modal-body');
    const footer = document.getElementById('article-modal-footer');

    document.getElementById('article-modal-title').textContent = article.title;

    body.innerHTML = `
      <div style="margin-bottom: 16px; padding: 12px; background: var(--color-bg-1); border-radius: 8px; font-size: 14px; color: var(--color-text-secondary);">
        <div style="display: flex; gap: 16px;">
          <span>${this.getDeviceIcon(article.category)} ${article.category}</span>
          <span>üëÅÔ∏è ${article.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
          <span>üëç ${article.helpful} –ø–æ–ª–µ–∑–Ω–æ</span>
          <span>üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${this.formatDate(article.lastUpdated)}</span>
        </div>
      </div>
      
      <div style="line-height: 1.8; font-size: 16px;">
        ${article.content}
      </div>

      ${article.tags ? `
        <div style="margin-top: 24px;">
          <strong>–¢–µ–≥–∏:</strong>
          ${article.tags.map(tag => `<span class="badge badge--gray" style="margin-left: 4px;">${tag}</span>`).join('')}
        </div>
      ` : ''}
    `;

    footer.innerHTML = `
      <div style="flex: 1;">
        <span style="color: var(--color-text-secondary); font-size: 14px;">–ë—ã–ª–∞ –ª–∏ —ç—Ç–∞ —Å—Ç–∞—Ç—å—è –ø–æ–ª–µ–∑–Ω–∞?</span>
      </div>
      <div style="display: flex; gap: 8px;">
        <button class="btn btn--secondary close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
        <button class="btn btn--success helpful-btn">üëç –ü–æ–ª–µ–∑–Ω–æ</button>
      </div>
    `;

    modal.classList.remove('hidden');
    document.getElementById('modal-backdrop').classList.remove('hidden');

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    article.views++;
  }

  closeModal() {
    document.querySelectorAll('.modal').forEach(modal => {
      modal.classList.add('hidden');
    });
    const backdrop = document.getElementById('modal-backdrop');
    if (backdrop) {
      backdrop.classList.add('hidden');
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  validateField(field) {
    if (!field.name) return true;
    
    const fieldName = field.name;
    const fieldValue = field.value.trim();
    let isValid = true;
    let errorMessage = '';

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
    field.classList.remove('error');
    const errorElement = document.getElementById(`${fieldName}-error`);
    if (errorElement) {
      errorElement.classList.remove('visible');
      errorElement.textContent = '';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
    switch (fieldName) {
      case 'title':
        if (!fieldValue) {
          isValid = false;
          errorMessage = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        } else if (fieldValue.length < 10) {
          isValid = false;
          errorMessage = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
        }
        break;

      case 'deviceType':
        if (!fieldValue) {
          isValid = false;
          errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞';
        }
        break;

      case 'category':
        if (!fieldValue) {
          isValid = false;
          errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
        }
        break;

      case 'priority':
        if (!fieldValue) {
          isValid = false;
          errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç';
        }
        break;

      case 'description':
        if (!fieldValue) {
          isValid = false;
          errorMessage = '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        } else if (fieldValue.length < 20) {
          isValid = false;
          errorMessage = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤';
        }
        break;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (!isValid) {
      field.classList.add('error');
      if (errorElement) {
        errorElement.textContent = errorMessage;
        errorElement.classList.add('visible');
      }
    }

    this.formValidation[fieldName] = isValid;
    return isValid;
  }

  validateForm() {
    const form = document.getElementById('create-ticket-form');
    if (!form) return false;
    
    const requiredFields = ['title', 'deviceType', 'category', 'priority', 'description'];
    let isFormValid = true;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    this.formValidation = {};

    requiredFields.forEach(fieldName => {
      const field = form.querySelector(`[name="${fieldName}"]`);
      if (field) {
        const isFieldValid = this.validateField(field);
        if (!isFieldValid) {
          isFormValid = false;
        }
      } else {
        console.warn(`Field ${fieldName} not found`);
        isFormValid = false;
      }
    });

    return isFormValid;
  }

  clearFormErrors() {
    this.formValidation = {};
    document.querySelectorAll('.form-control.error').forEach(field => {
      field.classList.remove('error');
    });
    document.querySelectorAll('.form-error.visible').forEach(error => {
      error.classList.remove('visible');
      error.textContent = '';
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
  handleFormSubmit(e) {
    e.preventDefault();
    console.log('Form submitted');
    
    if (this.validateForm()) {
      console.log('Form is valid, creating ticket');
      this.createTicket(e.target);
    } else {
      console.log('Form is invalid');
      this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', 'danger');
    }
  }

  createTicket(form) {
    const formData = new FormData(form);
    const newTicket = {
      id: `RIK-2025-${String(this.data.tickets.length + 1).padStart(3, '0')}`,
      title: formData.get('title'),
      description: formData.get('description'),
      category: formData.get('category'),
      priority: formData.get('priority'),
      deviceType: formData.get('deviceType'),
      status: 'open',
      assignee: null,
      reporter: this.currentUser.name,
      created: new Date().toISOString(),
      updated: new Date().toISOString(),
      comments: []
    };

    console.log('Creating new ticket:', newTicket);

    this.data.tickets.unshift(newTicket);
    this.filteredTickets = [...this.data.tickets];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    if (this.data.stats.deviceStats[newTicket.deviceType]) {
      this.data.stats.deviceStats[newTicket.deviceType]++;
    } else {
      this.data.stats.deviceStats[newTicket.deviceType] = 1;
    }
    
    this.closeModal();
    this.showNotification(`–¢–∏–∫–µ—Ç ${newTicket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`, 'success');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∏–∫–µ—Ç–æ–≤ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–∏–∫–µ—Ç–æ–≤
    if (this.currentRoute === 'tickets') {
      const tbody = document.getElementById('ticketsTableBody');
      if (tbody) {
        tbody.innerHTML = this.renderTicketsTable();
      }
    }
  }

  addComment(ticketId) {
    const commentText = document.getElementById('new-comment')?.value.trim();
    if (!commentText) {
      this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'warning');
      return;
    }

    const ticket = this.data.tickets.find(t => t.id === ticketId);
    if (!ticket) return;

    const newComment = {
      author: this.currentUser.name,
      text: commentText,
      timestamp: new Date().toISOString(),
      type: 'agent'
    };

    if (!ticket.comments) ticket.comments = [];
    ticket.comments.push(newComment);
    ticket.updated = new Date().toISOString();

    this.showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    this.viewTicket(ticketId);
  }

  markArticleHelpful(articleId) {
    const article = this.data.knowledgeBase.find(a => a.id === articleId);
    if (article) {
      article.helpful++;
      this.showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', 'success');
      this.viewArticle(articleId);
    }
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏–∫–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  bindTicketFilters() {
    const deviceTypeFilter = document.getElementById('deviceTypeFilter');
    const statusFilter = document.getElementById('statusFilter');
    const priorityFilter = document.getElementById('priorityFilter');
    const categoryFilter = document.getElementById('categoryFilter');
    const searchInput = document.getElementById('ticketSearch');

    [deviceTypeFilter, statusFilter, priorityFilter, categoryFilter].forEach(element => {
      if (element) {
        element.addEventListener('change', () => this.filterTickets());
      }
    });

    if (searchInput) {
      searchInput.addEventListener('input', () => this.filterTickets());
    }
  }

  filterTickets() {
    const deviceTypeFilter = document.getElementById('deviceTypeFilter')?.value || '';
    const statusFilter = document.getElementById('statusFilter')?.value || '';
    const priorityFilter = document.getElementById('priorityFilter')?.value || '';
    const categoryFilter = document.getElementById('categoryFilter')?.value || '';
    const searchQuery = document.getElementById('ticketSearch')?.value.toLowerCase() || '';

    this.filteredTickets = this.data.tickets.filter(ticket => {
      const matchesDeviceType = !deviceTypeFilter || ticket.deviceType === deviceTypeFilter;
      const matchesStatus = !statusFilter || ticket.status === statusFilter;
      const matchesPriority = !priorityFilter || ticket.priority === priorityFilter;
      const matchesCategory = !categoryFilter || ticket.category === categoryFilter;
      const matchesSearch = !searchQuery || ticket.title.toLowerCase().includes(searchQuery) || 
                          ticket.description.toLowerCase().includes(searchQuery);

      return matchesDeviceType && matchesStatus && matchesPriority && matchesCategory && matchesSearch;
    });

    const tbody = document.getElementById('ticketsTableBody');
    if (tbody) {
      tbody.innerHTML = this.renderTicketsTable();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    const subtitle = document.querySelector('.page-subtitle');
    if (subtitle && this.currentRoute === 'tickets') {
      subtitle.textContent = `–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: ${this.filteredTickets.length}`;
    }
  }

  // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  bindKnowledgeSearch() {
    const searchInput = document.getElementById('knowledgeSearch');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const query = e.target.value.toLowerCase();
        if (query.length < 2) {
          return;
        }

        const results = this.data.knowledgeBase.filter(article => 
          article.title.toLowerCase().includes(query) ||
          article.content.toLowerCase().includes(query) ||
          article.category.toLowerCase().includes(query)
        );

        console.log(`–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${query}"`);
        this.showNotification(`–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`, 'info');
      });
    }
  }

  // –ì—Ä–∞—Ñ–∏–∫–∏
  initDashboardCharts() {
    const ctx = document.getElementById('weeklyChart');
    if (!ctx) return;

    if (this.charts.weekly) {
      this.charts.weekly.destroy();
    }

    this.charts.weekly = new Chart(ctx, {
      type: 'line',
      data: {
        labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
        datasets: [{
          label: '–°–æ–∑–¥–∞–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤',
          data: this.data.stats.weeklyTrend,
          borderColor: '#1FB8CD',
          backgroundColor: 'rgba(31, 184, 205, 0.1)',
          tension: 0.4,
          fill: true
        }, {
          label: '–†–µ—à–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤',
          data: [8, 15, 12, 18, 16, 20, 19],
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          tension: 0.4,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top'
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0, 0, 0, 0.1)'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });
  }

  initReportsCharts() {
    // –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const deviceCtx = document.getElementById('deviceChart');
    if (deviceCtx) {
      if (this.charts.device) {
        this.charts.device.destroy();
      }

      this.charts.device = new Chart(deviceCtx, {
        type: 'doughnut',
        data: {
          labels: Object.keys(this.data.stats.deviceStats),
          datasets: [{
            data: Object.values(this.data.stats.deviceStats),
            backgroundColor: ['#1FB8CD', '#FFC185', '#B4413C', '#ECEBD5', '#5D878F'],
            borderWidth: 2,
            borderColor: '#ffffff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }

    // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    const prioritiesCtx = document.getElementById('prioritiesChart');
    if (prioritiesCtx) {
      const priorityCounts = { low: 0, medium: 0, high: 0, critical: 0 };
      this.data.tickets.forEach(ticket => {
        priorityCounts[ticket.priority]++;
      });

      if (this.charts.priorities) {
        this.charts.priorities.destroy();
      }

      this.charts.priorities = new Chart(prioritiesCtx, {
        type: 'pie',
        data: {
          labels: ['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'],
          datasets: [{
            data: Object.values(priorityCounts),
            backgroundColor: ['#DB4545', '#D2BA4C', '#964325', '#944454'],
            borderWidth: 2,
            borderColor: '#ffffff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }

    // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
    const agentsCtx = document.getElementById('agentsChart');
    if (agentsCtx) {
      const agents = this.data.users.filter(u => u.role === 'agent');
      
      if (this.charts.agents) {
        this.charts.agents.destroy();
      }

      this.charts.agents = new Chart(agentsCtx, {
        type: 'bar',
        data: {
          labels: agents.map(a => a.name),
          datasets: [{
            label: '–†–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤',
            data: agents.map(a => a.ticketsResolved || 0),
            backgroundColor: 'rgba(31, 184, 205, 0.8)',
            borderColor: '#1FB8CD',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  updateBreadcrumb() {
    const breadcrumb = document.getElementById('breadcrumb');
    const routeNames = {
      dashboard: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      tickets: '–¢–∏–∫–µ—Ç—ã',
      knowledge: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
      reports: '–û—Ç—á–µ—Ç—ã',
      users: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
      settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      profile: '–ü—Ä–æ—Ñ–∏–ª—å'
    };

    if (breadcrumb) {
      breadcrumb.textContent = routeNames[this.currentRoute] || 'Rikor HelpDesk';
    }
  }

  calculateStats() {
    return {
      total: this.data.tickets.length,
      open: this.data.tickets.filter(t => ['open', 'new'].includes(t.status)).length,
      inProgress: this.data.tickets.filter(t => t.status === 'in_progress').length,
      resolved: this.data.tickets.filter(t => ['resolved', 'closed'].includes(t.status)).length
    };
  }

  getDeviceIcon(deviceType) {
    const icons = {
      '–ù–æ—É—Ç–±—É–∫': 'üíª',
      '–°–µ—Ä–≤–µ—Ä': 'üñ•Ô∏è',
      '–ú–∏–Ω–∏ –ü–ö': 'üì¶',
      '–¢–µ–ª–µ—Ñ–æ–Ω': 'üìû',
      '–î—Ä—É–≥–æ–µ': 'üîß'
    };
    return icons[deviceType] || 'üíª';
  }

  getStatusName(status) {
    const names = {
      open: '–û—Ç–∫—Ä—ã—Ç',
      new: '–ù–æ–≤—ã–π',
      in_progress: '–í —Ä–∞–±–æ—Ç–µ',
      waiting: '–û–∂–∏–¥–∞–Ω–∏–µ',
      resolved: '–†–µ—à–µ–Ω',
      closed: '–ó–∞–∫—Ä—ã—Ç'
    };
    return names[status] || status;
  }

  getStatusClass(status) {
    const classes = {
      open: 'success',
      new: 'primary',
      in_progress: 'warning',
      waiting: 'gray',
      resolved: 'success',
      closed: 'gray'
    };
    return classes[status] || 'gray';
  }

  getPriorityName(priority) {
    const names = {
      low: '–ù–∏–∑–∫–∏–π',
      medium: '–°—Ä–µ–¥–Ω–∏–π',
      high: '–í—ã—Å–æ–∫–∏–π',
      critical: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
    };
    return names[priority] || priority;
  }

  getPriorityClass(priority) {
    const classes = {
      low: 'gray',
      medium: 'warning',
      high: 'danger',
      critical: 'danger'
    };
    return classes[priority] || 'gray';
  }

  getCategoryName(categoryId) {
    const category = this.data.categories.find(c => c.id === categoryId);
    return category ? category.name : categoryId;
  }

  getAvatarFromName(name) {
    return name.split(' ').map(n => n[0]).join('').toUpperCase();
  }

  formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  showNotification(message, type = 'info') {
    const container = document.getElementById('notifications-container');
    if (!container) return;
    
    const notification = document.createElement('div');
    
    notification.className = `notification notification--${type}`;
    notification.innerHTML = `
      ${message}
      <button class="notification__close" onclick="this.parentElement.remove()">&times;</button>
    `;
    
    container.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  toggleSidebar() {
    const sidebar = document.querySelector('.sidebar');
    if (sidebar) {
      sidebar.classList.toggle('open');
    }
  }

  toggleNotifications() {
    const panel = document.getElementById('notifications-panel');
    const dropdown = document.getElementById('user-menu-dropdown');
    
    if (panel) panel.classList.toggle('hidden');
    if (dropdown) dropdown.classList.add('hidden');
  }

  toggleUserMenu() {
    const dropdown = document.getElementById('user-menu-dropdown');
    const panel = document.getElementById('notifications-panel');
    
    if (dropdown) dropdown.classList.toggle('hidden');
    if (panel) panel.classList.add('hidden');
  }

  exportTickets() {
    this.showNotification('–≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–∫–µ—Ç–æ–≤ –≤ Excel...', 'info');
    setTimeout(() => {
      this.showNotification('–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é', 'success');
    }, 2000);
  }

  handleGlobalSearch(query) {
    if (!query || query.length < 2) return;
    
    console.log('–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫:', query);
    this.showNotification(`–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"...`, 'info');
  }

  toggleProfileMenu() {
    // Placeholder –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
  window.app = new RikorHelpDesk();
});